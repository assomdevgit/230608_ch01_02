# 숫자 계산
'''
- 파이썬에서는 수수자의 자료형(종류)에 따라서 계산 결과가 달라질 수 있음
- 파이썬에서는 숫자를 정수(int), 실수(float), 복소수(complex)로 구분
- 보통 프로그래밍에서는 정수와 실수를 주로 사용
'''

## 정수계산

### 사칙연산
# 덧셈
print(1+1) # 2
print(1+2) # 3
print(1+2+3) # 6

# + : 덧셈 연산자
# - : 밸셈 연산자
print(5-1)
print(1-5)

# * : 곱셈 연산자
print( 2 * 3)
print( 2 * 3 * 4)

# / : 나누기
print(4/2) # 2.0
print(5/2) # 2.5 -> 소수점이 붙은 수로 '변환'이 되었다
print(type(2*2)) # <class 'int'>
print(type(5/2)) # <class 'float'>

# 파이선에서는 정수끼리 나눗셈 계산을 하더라도, 실수값을 반환한다.
# 몫 : 나머지 없이, 나눗셈 했을 때 정수로 딱 떨어지는 값
# // : 몫 연산자 <-- C계열 언어에서의 주석표시
'''
- 정수끼리 나눗셈 결과가 실수가 아니라 정수로 나오게 해야할 때 (나머지를 배제해야할 때)
- //로 나눗셈을 하시면 됨
- //는 버림 나눗셈(floor division)이라고 부르며 나눗셈의 결과에서 소수점 이하는 버림
'''
print(5//2, type(5//2)) # 2 <class 'int'>
'''
- 참고로 실수에 // 연산자를 사용하면 결과는 실수가 나오지만 소수점 이하는 버림
- 따라서 (연산자 앞 enl 숫자 중에 하나라도 실수라면) 결과는 항상 .0으로 끝남
'''
print(5.5 // 2, 4 // 2.0, 4.1 // 2.1)

#  % : 나머지 연산자
# 모듈로(modulo) 연산자
print(5 % 2) # 1
print(5 % 3) # 2
print(5 % 4) # 1
print(5 % 5) # 0

# ** : 거듭제곱 연산자
print(2**2) # 4
print(2**8) # 256
print(2 ** 0.5) # 루트 연산자는 따로 없어서 0.5 곱한다.

# 값을 정수로 만들기
'''
* 계산 결과가 실수(소수점 있어)로 나왔을 경우에, 강제로 정수로 만들어야할 때는,
* int에 괄호를 붙이고, 숫자 또는 계산식을 넣으면 됨.
* 특히 int(...)에 문자열을 넣어도 정수로 만들 수 있음. 단, 정수로 된 문자열
'''
print(3.3, type(3.3), int(3.3), type(int(3.3)))
print(int(19/2), type(int(19/2))) # /에 int(...) == // 몫 연산자와 같은 적용
print("5", type("5"), int("5"), type(int("5")))
# int --> 정수(integer)를 뜻하며, 값을 정수로 만들어줌 (소수점 이하를 버림)

# 몫과 나머지 함께 구하기
print(5//2, 5%2)
print(divmod(5,2)) # 5를 2로 나눴을 때의 몫과 나머지를 반환해주는 내장 함수

# 실수 계산
## 실수끼리의 계산 (실수라고 해서 별도의 연산자를 쓰진 않아요)
## 계산하는 대상(피연산지) 중에 하나라도 실수가 들어간다면 무조건 실수처리 (. 붙는다)

## 실수끼리의 덧셈
print(3.5 + 2.1) # 둘 중의 하나가 실수라면
print(3 + 2.1)

# 코딩을 배울 때 값을 예측하는 습관

## 실수끼리의 뺄셈
print(4.3 - 2.7) # 부동소수점
print(4.3 - 2.8) # 부동소수점
# 컴류터는 0,1로 모든 값을 기억한다. --> 2의 배수의 값만 표시 가능
# 소수점 미만의 작은 오차가 생김 --> 부동소수점.
print(1.6 * 3.8)

# 값을 실수로 만들기 (float)
print(float(5))
print(123e-2)

'''
* float는 부동소수점(floating point number)에서 따왔으며 값을 실수로 만들어줌
'''
print(type(3.5))

# 괄호 사용 - * 계산의 우선순위, 함수의 실행
print(35 + 1 * 2) # 37 -> * 이 우선순위를 갖는다
print((35 + 1) * 2) # 72

